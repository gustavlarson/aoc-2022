/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package aoc;

import static aoc.App.Move.PAPER;
import static aoc.App.Move.ROCK;
import static aoc.App.Move.SCISSOR;
import static aoc.App.Result.DRAW;
import static aoc.App.Result.LOSS;
import static aoc.App.Result.WIN;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.stream.Collectors;

public class App {
    private final List<Round> input;

    public App(List<Round> input) {
        this.input = input;
    }

    public long getSolutionPart1() {
        return input.stream().mapToLong(Round::score).sum();
    }

    public long getSolutionPart2() {
        return input.stream().mapToLong(Round::score2).sum();
    }

    public static void main(String[] args) throws IOException {
        System.out.println("java");
        List<Round> input = parseInput("input.txt");
        String part = System.getenv("part") == null ? "part1" : System.getenv("part");
        if (part.equals("part2"))
            System.out.println(new App(input).getSolutionPart2());
        else
            System.out.println(new App(input).getSolutionPart1());
    }

    private static List<Round> parseInput(String filename) throws IOException {
        return Files.lines(Path.of(filename))
                .map((line) -> {var moves = line.split(" "); return new Round(getMove(moves[0]), getMove(moves[1]));})
                .collect(Collectors.toList());
    }

    record Round(Move opponent, Move player) {
        long score() {
            long baseScore = player.ordinal()+1;
            return switch(calculateScore(opponent,player)) {
                case LOSS -> baseScore;
                case WIN -> baseScore + 6;
                case DRAW -> baseScore + 3;
            };
        }
        long score2() {
            Move playerMove = chooseMove(opponent, getResult(player));
            long baseScore = playerMove.ordinal()+1;
            return switch(calculateScore(opponent, playerMove)) {
                case LOSS -> baseScore;
                case WIN -> baseScore + 6;
                case DRAW -> baseScore + 3;
            };
        }
    }

    private static Move getMove(String s){
        return switch (s) {
            case "A", "X" -> ROCK;
            case "B", "Y" -> PAPER;
            case "C", "Z" -> SCISSOR;
            default -> throw new IllegalArgumentException();
        };
    };

    private static Result getResult(Move s){
        return switch (s) {
            case ROCK -> LOSS;
            case PAPER -> DRAW;
            case SCISSOR -> WIN;
        };
    };


    private static Result calculateScore(Move opponent, Move player) {
        if (opponent == player) {
            return DRAW;
        } else if ((opponent == SCISSOR && player == PAPER) || (opponent==PAPER && player == ROCK) || (opponent == ROCK && player == SCISSOR)) {
            return LOSS;
        } else return WIN;
    }

    private static Move chooseMove(Move opponentMove, Result outcome) {
        if (outcome == DRAW) {
            return opponentMove;
        } else if (outcome == WIN) {
            return switch (opponentMove) {
                case ROCK -> PAPER;
                case PAPER -> SCISSOR;
                case SCISSOR -> ROCK;
            };
        } else {
            return switch (opponentMove) {
                case ROCK -> SCISSOR;
                case PAPER -> ROCK;
                case SCISSOR -> PAPER;
            };
        }
    }

    enum Move {ROCK, PAPER, SCISSOR};
    enum Result {DRAW, WIN, LOSS};
}
